import{D as H,H as B,F as L,a as G,L as V,b as M}from"./3dItem-DMc9cckF.js";import"./index-CxtFEXVE.js";class $ extends H{constructor(g){super(g),this.type=B}parse(g){const _=function(r,t){switch(r){case 1:console.error("THREE.RGBELoader Read Error: "+(t||""));break;case 2:console.error("THREE.RGBELoader Write Error: "+(t||""));break;case 3:console.error("THREE.RGBELoader Bad File Format: "+(t||""));break;default:case 4:console.error("THREE.RGBELoader: Error: "+(t||""))}return-1},D=`
`,u=function(r,t,l){t=t||1024;let i=r.pos,n=-1,e=0,s="",a=String.fromCharCode.apply(null,new Uint16Array(r.subarray(i,i+128)));for(;0>(n=a.indexOf(D))&&e<t&&i<r.byteLength;)s+=a,e+=a.length,i+=128,a+=String.fromCharCode.apply(null,new Uint16Array(r.subarray(i,i+128)));return-1<n?(r.pos+=e+n+1,s+a.slice(0,n)):!1},S=function(r){const t=/^#\?(\S+)/,l=/^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,o=/^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,i=/^\s*FORMAT=(\S+)\s*$/,n=/^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,e={valid:0,string:"",comments:"",programtype:"RGBE",format:"",gamma:1,exposure:1,width:0,height:0};let s,a;if(r.pos>=r.byteLength||!(s=u(r)))return _(1,"no header found");if(!(a=s.match(t)))return _(3,"bad initial token");for(e.valid|=1,e.programtype=a[1],e.string+=s+`
`;s=u(r),s!==!1;){if(e.string+=s+`
`,s.charAt(0)==="#"){e.comments+=s+`
`;continue}if((a=s.match(l))&&(e.gamma=parseFloat(a[1])),(a=s.match(o))&&(e.exposure=parseFloat(a[1])),(a=s.match(i))&&(e.valid|=2,e.format=a[1]),(a=s.match(n))&&(e.valid|=4,e.height=parseInt(a[1],10),e.width=parseInt(a[2],10)),e.valid&2&&e.valid&4)break}return e.valid&2?e.valid&4?e:_(3,"missing image size specifier"):_(3,"missing format specifier")},U=function(r,t,l){const o=t;if(o<8||o>32767||r[0]!==2||r[1]!==2||r[2]&128)return new Uint8Array(r);if(o!==(r[2]<<8|r[3]))return _(3,"wrong scanline width");const i=new Uint8Array(4*t*l);if(!i.length)return _(4,"unable to allocate buffer space");let n=0,e=0;const s=4*o,a=new Uint8Array(4),p=new Uint8Array(s);let A=l;for(;A>0&&e<r.byteLength;){if(e+4>r.byteLength)return _(1);if(a[0]=r[e++],a[1]=r[e++],a[2]=r[e++],a[3]=r[e++],a[0]!=2||a[1]!=2||(a[2]<<8|a[3])!=o)return _(3,"bad rgbe scanline format");let d=0,c;for(;d<s&&e<r.byteLength;){c=r[e++];const E=c>128;if(E&&(c-=128),c===0||d+c>s)return _(3,"bad scanline data");if(E){const h=r[e++];for(let T=0;T<c;T++)p[d++]=h}else p.set(r.subarray(e,e+c),d),d+=c,e+=c}const f=o;for(let E=0;E<f;E++){let h=0;i[n]=p[E+h],h+=o,i[n+1]=p[E+h],h+=o,i[n+2]=p[E+h],h+=o,i[n+3]=p[E+h],n+=4}A--}return i},k=function(r,t,l,o){const i=r[t+3],n=Math.pow(2,i-128)/255;l[o+0]=r[t+0]*n,l[o+1]=r[t+1]*n,l[o+2]=r[t+2]*n,l[o+3]=1},N=function(r,t,l,o){const i=r[t+3],n=Math.pow(2,i-128)/255;l[o+0]=G.toHalfFloat(Math.min(r[t+0]*n,65504)),l[o+1]=G.toHalfFloat(Math.min(r[t+1]*n,65504)),l[o+2]=G.toHalfFloat(Math.min(r[t+2]*n,65504)),l[o+3]=G.toHalfFloat(1)},y=new Uint8Array(g);y.pos=0;const m=S(y);if(m!==-1){const r=m.width,t=m.height,l=U(y.subarray(y.pos),r,t);if(l!==-1){let o,i,n;switch(this.type){case L:n=l.length/4;const e=new Float32Array(n*4);for(let a=0;a<n;a++)k(l,a*4,e,a*4);o=e,i=L;break;case B:n=l.length/4;const s=new Uint16Array(n*4);for(let a=0;a<n;a++)N(l,a*4,s,a*4);o=s,i=B;break;default:console.error("THREE.RGBELoader: unsupported type: ",this.type);break}return{width:r,height:t,data:o,header:m.string,gamma:m.gamma,exposure:m.exposure,type:i}}}return null}setDataType(g){return this.type=g,this}load(g,b,w,F){function I(R,_){switch(R.type){case L:case B:R.encoding=V,R.minFilter=M,R.magFilter=M,R.generateMipmaps=!1,R.flipY=!0;break}b&&b(R,_)}return super.load(g,I,w,F)}}export{$ as RGBELoader};
