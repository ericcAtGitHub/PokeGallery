{"version":3,"sources":["Model/Model.ts","reportWebVitals.ts","EnvConfig/MyEnvConfig.ts","Declar.tsx","Model/Helper.ts","Context/UserInputContext.tsx","App.tsx","Context/GalleryContext.tsx","Hook/useSearchKey.ts","Hook/useAnim.ts","UI/Styled.ts","UI/GalleryUICard.tsx","UI/GalleryUICardLoadSkeleton.tsx","UI/GalleryUI.tsx","UI/WaterUIback.tsx","UI/OptionRollUI.tsx","UI/WaterUI.tsx","Hook/useImgRepo.ts","Container/DisplayContainer.tsx","AppRoutes.tsx","index.tsx"],"names":["EViewPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","myEnvConfig","myProdConfig","Declar","className","style","fontSize","target","rel","href","float","process","MyEnvConfig","EnvName","PokeHelper","getPokeIdFromPokeSpecApiRes","apiRes","parseInt","url","replace","slice","GetGenNameDesc","gen","verNames","names","filter","name","indexOf","language","GetGenVerDesc","version_groups","GetSortedGen","pokemon_species","sort","a","b","GetPokeIdFromPokeSpecApiRes","GetGenusDesc","pokeSpec","genera","g","map","genus","reverse","join","GetNameDesc","toBeDisplayedNames","Helper","nameof","nameofFactory","Sleep","ms","Promise","callback","setTimeout","CopySelectedText","document","execCommand","alert","err","GetGlobalConfig","window","GlobalConfig","Fetcher","fetch","response","ok","json","error","globalConfig","UserInputContext","createContext","appSearchKey","appSetSearchKey","appImgRepo","Gallery","ImgRepo","appSetImgRepo","UserInputContextHOC","children","useState","stateSearchKey","setStateSearchKey","contextValues","Provider","value","App","fetcher","suspense","revalidateOnFocus","revalidateOnMount","revalidateOnReconnect","refreshWhenOffline","refreshWhenHidden","refreshInterval","GalleryContext","appDisplayGalleryItems","appIsShowSpecialHandler","withRouter","routeParams","pokeHelper","getGlobalConfigGenDataObj","criteriaChecker","GenData","find","targetGlobalConfigGenDataObj","routeId","match","params","sortedTargetGen","obj","stateSortedGalleryItems","setStateSortedGalleryItems","useContext","useSearchKey","stateIsShowSpecialOnly","scrollToThisEleRef","useRef","useEffect","stateScrollBtnCssClass","setStateScrollBtnCssClass","firstScrollHandler","addEventListener","once","removeEventListener","rtn","forEach","toLowerCase","includes","toLocaleLowerCase","getDisplayGalleryItems","is_legendary","is_mythical","appRouteCtx","type","ref","onChange","e","targetGenDataObj","desc","history","push","path","defaultValue","d","display","activeClassName","to","exact","onClick","newData","array","i","length","j","Math","floor","random","shuffleArray","placeholder","current","scrollIntoView","useAnim","enumViewPageName","componentRepresentation","useTransition","keys","compRep","ModelDef","Default","from","opacity","enter","leave","config","slow","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","StyledGalleryUICard","styled","div","pokeColor","StyledPokeType","span","pokemonType","genTFindicator","tf","GalleryUICard","poke","pokeSpecApiRes","useSWR","urlPoke","dataPoke","data","errorPoke","dataPokeSpec","errorPokeSpec","flavorText1Obj","flavor_text_entries","ft","flavorText2Obj","flavorText1","flavor_text","flavorText2","replaceAll","pokemonTypes","types","color","id","alt","src","height","weight","title","base_happiness","capture_rate","gender_rate","is_baby","forms_switchable","has_gender_differences","GalleryUICardLoadSkeleton","count","GalleryUI","stateIsLoadMore","setStateIsLoadMore","routeMatchParam","fallback","WaterUIback","appIsTargetNow","appDisplayPokeDetailHandler","abc","OptionRollUI","optionConfig","InitSelectedInd","stateSelectedInd","setStateSelectedInd","isMounted","options","OptionLabels","l","ind","label","OptionValues","onOptionChanged","newValue","newInd","OptionChangeHandler","Desc","preventDefault","findIndex","o","TARGET_POKE_DESC_LOADING","WaterUI","stateIsShowReactImgGal","setStateIsShowReactImgGal","stateReactImgGalIndex","setStateReactImgGalIndex","stateToBeTargetPokeId","setStateToBeTargetPokeId","stateTargetPoke","setStateTargetPoke","useImgRepo","proGalItems","pokeId","itemId","mediaUrl","basePath","ext","metadata","reactImgGalItems","proItem","original","proGalContainer","width","innerWidth","innerHeight","displayPokeDetailHandler","ir","optValue","newOptValue","targetImgRepo","styleChangeHandler","items","container","imageHoverAnimation","hoveringBehaviour","gallerySize","itemBorderWidth","eventsListener","eventName","eventData","idx","onErrorImageURL","showBullets","showIndex","showThumbnails","lazyLoad","showPlayButton","startIndex","slideDuration","showFullscreenButton","onSlide","currentIndex","DisplayContainer","enumViewPage","stateAnim","styles","custItem","eViewPage","Water","AppRoutes","component","routeProps","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b53a9ae4.chunk.js","sourcesContent":["/***** Type definition based on PokeApi ******/\r\n\r\nexport type TGeneration = {\r\n\tid: number, // The identifier for this resource.\r\n\tname: string, // The name for this resource.\r\n\tabilities: any[], //A list of abilities that were introduced in this generation. list NamedAPIResource(Ability)\r\n\tnames: TName[], //The name of this resource listed in different languages. list Name\r\n\tmain_region: any,//The main region travelled in this generation. NamedAPIResource(Region)\r\n\tmoves: any[], //A list of moves that were introduced in this generation. list NamedAPIResource(Move)\r\n\tpokemon_species: TNamedAPIResource[], //A list of Pokémon species that were introduced in this generation. list NamedAPIResource(PokemonSpecies)\r\n\ttypes: any[], //A list of types that were introduced in this generation. list NamedAPIResource(Type)\r\n\tversion_groups: TNamedAPIResource[] //A list of version groups that were introduced in this generation. list NamedAPIResource (VersionGroup)\r\n}\r\n\r\nexport type TNamedAPIResource = {\r\n\tname: string //The name of the referenced resource.\r\n\turl: string //The URL of the referenced resource.\r\n}\r\n\r\nexport type TName = {\r\n\tname: string //The localized name for an API resource in a specific language.\r\n\tlanguage: TNamedAPIResource //The language this name is in. NamedAPIResource(Language)\r\n}\r\n\r\nexport type TFlavorText = {\r\n\tflavor_text: string //The localized flavor text for an API resource in a specific language.\r\n\tlanguage: TNamedAPIResource //The language this name is in. NamedAPIResource(Language)\r\n\tversion: TNamedAPIResource//The game version this flavor text is extracted from. NamedAPIResource(Version)\r\n}\r\n\r\nexport type TPokemonSpecies = {\r\n\tid: number //The identifier for this resource.\r\n\tname: string //The name for this resource.\r\n\torder: number //The order in which species should be sorted.Based on National Dex order, except families are grouped together and sorted by stage.\r\n\tgender_rate: number //The chance of this Pokémon being female, in eighths; or - 1 for genderless.\r\n\tcapture_rate: number // The base capture rate; up to 255. The higher the number, the easier the catch.\r\n\tbase_happiness: number //The happiness when caught by a normal Pokéball; up to 255. The higher the number, the happier the Pokémon.\r\n\tis_baby: boolean //Whether or not this is a baby Pokémon.\r\n\tis_legendary: boolean //Whether or not this is a legendary Pokémon.\r\n\tis_mythical: boolean //Whether or not this is a mythical Pokémon.\r\n\thatch_counter: number //Initial hatch counter: one must walk 255 × (hatch_counter + 1) steps before this Pokémon's egg hatches, unless utilizing bonuses like Flame Body's.\r\n\thas_gender_differences: boolean //Whether or not this Pokémon has visual gender differences.\r\n\tforms_switchable: boolean //Whether or not this Pokémon has multiple forms and can switch between them.\r\n\tgrowth_rate: any[] //The rate at which this Pokémon species gains levels. NamedAPIResource(GrowthRate)\r\n\tpokedex_numbers: any[] //A list of Pokedexes and the indexes reserved within them for this Pokémon species. list PokemonSpeciesDexEntry\r\n\tegg_groups: any[] //A list of egg groups this Pokémon species is a member of. list NamedAPIResource(EggGroup)\r\n\tcolor: TNamedAPIResource //The color of this Pokémon for Pokédex search. NamedAPIResource(PokemonColor)\r\n\tshape: any //The shape of this Pokémon for Pokédex search. NamedAPIResource(PokemonShape)\r\n\tevolves_from_species: TPokemonSpecies //The Pokémon species that evolves into this Pokemon_species.\r\n\tevolution_chain: any //The evolution chain this Pokémon species is a member of. APIResource(EvolutionChain)\r\n\thabitat: any //The habitat this Pokémon species can be encountered in.\r\n\tgeneration: TGeneration //The generation this Pokémon species was introduced in.\r\n\tnames: TName[] // The name of this resource listed in different languages. list Name\r\n\tpal_park_encounters: any[] //A list of encounters that can be had with this Pokémon species in pal park. list PalParkEncounterArea\r\n\tflavor_text_entries: TFlavorText[] // A list of flavor text entries for this Pokémon species. list FlavorText\r\n\tform_descriptions: any[] //Descriptions of different forms Pokémon take on within the Pokémon species. list Description\r\n\tgenera: any[] // The genus of this Pokémon species listed in multiple languages. list Genus\r\n\tvarieties: any[] // A list of the Pokémon that exist within this Pokémon species. list PokemonSpeciesVariety\r\n}\r\n\r\nexport type TPokemon = {\r\n\tid: number //The identifier for this resource.\r\n\tname: string //The name for this resource.\r\n\tbase_experience: number //The base experience gained for defeating this Pokémon.\r\n\theight: number //The height of this Pokémon in decimetres.\r\n\tis_default: boolean //Set for exactly one Pokémon used as the default for each species.\r\n\torder: number //Order for sorting.Almost national order, except families are grouped together.\r\n\tweight: number //The weight of this Pokémon in hectograms.\r\n\tabilities: any[] //A list of abilities this Pokémon could potentially have. list PokemonAbility\r\n\tforms: TNamedAPIResource[] //A list of forms this Pokémon can take on. list NamedAPIResource(PokemonForm)\r\n\tgame_indices: any[]//A list of game indices relevent to Pokémon item by generation. list VersionGameIndex\r\n\theld_items: any[] //A list of items this Pokémon may be holding when encountered. list PokemonHeldItem\r\n\tlocation_area_encounters: string//A link to a list of location areas, as well as encounter details pertaining to specific versions.\r\n\tmoves: any[] //A list of moves along with learn methods and level details pertaining to specific version groups. list PokemonMove\r\n\tpast_types: any[]//A list of details showing types this pokémon had in previous generations list PokemonTypePast\r\n\tsprites: TPokemonSprites//A set of sprites used to depict this Pokémon in the game.A visual representation of the various sprites can be found at PokeAPI / sprites\r\n\tspecies: TNamedAPIResource//The species this Pokémon belongs to. NamedAPIResource(PokemonSpecies)\r\n\tstats: any[] //A list of base stat values for this Pokémon. list PokemonStat\r\n\ttypes: any[] //A list of details showing types this Pokémon has. list PokemonType\r\n}\r\n\r\nexport type TType = {\r\n\tid: number //The identifier for this resource.\r\n\tname: string //The name for this resource.\r\n\tdamage_relations: any //A detail of how effective this type is toward others and vice versa. TypeRelations\r\n\tpast_damage_relations: any[]//A list of details of how effective this type was toward others and vice versa in previous generations list TypeRelationsPast(Type)\r\n\tgame_indices: any[] //A list of game indices relevent to this item by generation. list GenerationGameIndex\r\n\tgeneration: TNamedAPIResource //The generation this type was introduced in. NamedAPIResource(Generation)\r\n\tmove_damage_class: TNamedAPIResource //The class of damage inflicted by this type. NamedAPIResource(MoveDamageClass)\r\n\tnames: TName[] //The name of this resource listed in different languages. list Name\r\n\tpokemon: TPokemon[] //A list of details of Pokémon that have this type. list TypePokemon\r\n\tmoves: TNamedAPIResource[] //A list of moves that have this type. list NamedAPIResource(Move)\r\n}\r\n\r\nexport type TPokemonColor = {\r\n\tid: number //The identifier for this resource.\r\n\tname: string //The name for this resource.\r\n\tnames: TName[] //The name of this resource listed in different languages. list Name\r\n\tpokemon_species: TNamedAPIResource[] //A list of the Pokémon species that have this color. list NamedAPIResource(PokemonSpecies)\r\n}\r\n\r\nexport type TPokemonSprites = {\r\n\tfront_default: string //The default depiction of this Pokémon from the front in battle.\r\n\tfront_shiny: string //The shiny depiction of this Pokémon from the front in battle.\r\n\tfront_female: string //The female depiction of this Pokémon from the front in battle.\r\n\tfront_shiny_female: string //The shiny female depiction of this Pokémon from the front in battle.\r\n\tback_default: string //The default depiction of this Pokémon from the back in battle.\r\n\tback_shiny: string //The shiny depiction of this Pokémon from the back in battle.\r\n\tback_female: string //The female depiction of this Pokémon from the back in battle.\r\n\tback_shiny_female: string //The shiny female depiction of this Pokémon from the back in battle.\r\n}\r\n\r\nexport type TGenus = {\r\n\tgenus: string //The localized genus for the referenced Pokémon species\r\n\tlanguage: TNamedAPIResource //The language this genus is in. NamedAPIResource(Language)\r\n}\r\n\r\n/****** Cust Type Def ******/\r\n\r\nexport enum EViewPage {\r\n\tDefault,\r\n\tWater\r\n}\r\n\r\nexport type TGlobalConfig = {\r\n\tGallery: TConfigGallery,\r\n\t//DeclarHeight: number\r\n}\r\n\r\ntype TConfigGallery = {\r\n\tGenData: TConfigGenData[],\r\n\tImgRepo: TConfigImgRepo[]\r\n}\r\n\r\nexport type TConfigGenData = {\r\n\tobj: any\r\n\tdesc: string\r\n\trouteId: string\r\n}\r\n\r\nexport type TConfigImgRepo = {\r\n\tbasePath: string\r\n\text: string\r\n\tdesc: string\r\n\toptValue: string\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import myDevConfig from './devConfig.json'\nimport myProdConfig from './prodConfig.json'\n\ninterface IMyEnvConfig { \n    EnvName: string\n    //DeclarHeight: number\n}\n\nconst { NODE_ENV = 'development' } = process.env\n\n// configurations by environment\nconst myEnvConfig: IMyEnvConfig = {\n    ...(NODE_ENV === 'production' ? myProdConfig : myDevConfig)\n}\n\nexport default myEnvConfig\n","import React, { FC } from 'react';\r\nimport MyEnvConfig from './EnvConfig/MyEnvConfig'\r\n\r\nimport Helper from './Model/Helper'\r\n\r\nconst Declar: FC = () => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"mx-auto w-50\">\r\n                <div style={{fontSize: 15}}>\r\n                    This React app is about Pokémon. It is adapted from ch.6\r\n                    of <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition\">\r\n                        this book\r\n                    </a> and built from:\r\n                    <ul>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://pokeapi.co/\">\r\n                                PokéAPI\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/vercel/swr\">\r\n                            SWR\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/styled-components/styled-components\">\r\n                                styled-components\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/wix/pro-gallery\">\r\n                                Pro Gallery\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/xiaolin/react-image-gallery\">\r\n                                React Image Gallery\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://react-spring.io/\">\r\n                                react-spring\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <p>Developed by Chan Ching Yin.<span style={{ float: 'right' }}>\r\n                    {`v${process.env.REACT_APP_VERSION}.${MyEnvConfig.EnvName}`}\r\n                    </span>\r\n                    </p>\r\n                <br />\r\n                <br />\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Declar;","import { useState } from 'react'\r\n\r\nimport * as ModelDef from '../Model/Model'\r\n\r\nfunction extract<T>(properties: Record<keyof T, true>) {\r\n\treturn function <TActual extends T>(value: TActual) {\r\n\t\tlet result = {} as T;\r\n\t\tfor (const property of Object.keys(properties) as Array<keyof T>) {\r\n\t\t\tresult[property] = value[property];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n//export const AppCache = async () => await caches.open('new-cache');\r\n\r\nexport const Helper = {\r\n\r\n\tnameof: <T>(name: keyof T) => name,\r\n\r\n\tnameofFactory: <T>() => (name: keyof T) => name,\r\n\r\n\tSleep: (ms: number) => {\r\n\t\treturn new Promise(callback => setTimeout(callback, ms));\r\n\t},\r\n\r\n\tCopySelectedText: () => {\r\n\t\ttry {\r\n\t\t\tlet isSuccess = document.execCommand('copy');\r\n\t\t\tif (!isSuccess) {\r\n\t\t\t\talert('Testing code was copied unsuccessfully');\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\talert('Oops, unable to copy');\r\n\t\t}\r\n\t},\r\n\r\n\tGetGlobalConfig: () => {\r\n\t\treturn (window as any).GlobalConfig as ModelDef.TGlobalConfig\r\n\t},\r\n\r\n\tFetcher: (url: string) => {\r\n\t\treturn fetch(url).then((response: Response) => {\r\n\t\t\tif (response.ok) {\r\n\t\t\t\t//let cloneResponse: Response = response.clone()\r\n\t\t\t\t//console.log(cloneResponse)\r\n\t\t\t\t//AppCache().then((appCache: Cache) => appCache.put(url, cloneResponse))\r\n\t\t\t\t\r\n\t\t\t\treturn response.json()\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\terror: true\r\n\t\t\t}\r\n\t\t})\r\n\t},\r\n}\r\n\r\nexport const PokeHelper = () => {\r\n\r\n\tconst getPokeIdFromPokeSpecApiRes = (apiRes: ModelDef.TNamedAPIResource): number =>\r\n\t\tparseInt(apiRes.url.replace(\"https://pokeapi.co/api/v2/pokemon-species/\", \"\").slice(0, -1))\r\n\r\n\treturn {\r\n\r\n\t\tGetGenNameDesc:(gen: ModelDef.TGeneration): string => {\r\n\t\t\tlet rtn = \"\"\r\n\t\t\tlet verNames: ModelDef.TName[] = gen.names.filter((name: ModelDef.TName) => [\"en\", \"ja\"].indexOf(name.language.name) >= 0)\r\n\t\t\trtn = `${verNames[0]?.name} / ${verNames[1]?.name}`\r\n\t\t\treturn rtn\r\n\t\t},\r\n\r\n\t\tGetGenVerDesc: (gen: ModelDef.TGeneration): string =>\r\n\t\t\t(`ver: ${gen.version_groups[0].name}, ${gen.version_groups[1].name}`),\r\n\r\n\t\tGetSortedGen: (gen: ModelDef.TGeneration):ModelDef.TGeneration => {\r\n\t\t\treturn {\r\n\t\t\t\t...gen,\r\n\t\t\t\tpokemon_species: gen.pokemon_species.sort((a, b) => getPokeIdFromPokeSpecApiRes(a) - getPokeIdFromPokeSpecApiRes(b))\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tGetPokeIdFromPokeSpecApiRes: getPokeIdFromPokeSpecApiRes,\r\n\r\n\t\tGetGenusDesc: (pokeSpec: ModelDef.TPokemonSpecies): string => (\r\n\t\t\tpokeSpec.genera.filter((g: ModelDef.TGenus) => [\"en\", \"zh-Hant\"].indexOf(g.language.name) >= 0)\r\n\t\t\t\t.map((g: ModelDef.TGenus) => g.genus.replace(\"Pokémon\", \"\").replace(\"寶可夢\", \"\"))\r\n\t\t\t\t.reverse()\r\n\t\t\t\t.join(\" \")\r\n\t\t),\r\n\r\n\t\tGetNameDesc: (pokeSpec: ModelDef.TPokemonSpecies): string => {\r\n\t\t\tconst toBeDisplayedNames: ModelDef.TName[] = pokeSpec.names.filter((name: ModelDef.TName) => [\"en\", \"zh-Hant\", \"ja\"].indexOf(name.language.name) >= 0)\r\n\t\t\treturn `${toBeDisplayedNames[1].name} ${toBeDisplayedNames[0].name} ${toBeDisplayedNames[2].name}`\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default Helper","import { NavLink as ReactLink, Route, withRouter } from 'react-router-dom'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { ChangeEvent, FC, ReactElement, useEffect, useRef, useState, createContext, Children } from 'react'\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper, { PokeHelper } from '../Model/Helper'\r\n\r\nconst globalConfig = Helper.GetGlobalConfig()\r\n\r\ninterface IUserInputContext {\r\n    appSearchKey: string,\r\n    appSetSearchKey: any,\r\n    appImgRepo: ModelDef.TConfigImgRepo,\r\n    appSetImgRepo: any,\r\n}\r\n\r\nexport const UserInputContext = createContext<IUserInputContext>({\r\n    appSearchKey: '',\r\n    appSetSearchKey: {},\r\n    appImgRepo: globalConfig.Gallery.ImgRepo[0],\r\n    appSetImgRepo: {}\r\n})\r\n\r\nconst UserInputContextHOC: FC = ({ children }): ReactElement => {\r\n\r\n    const [stateSearchKey, setStateSearchKey] = useState<string>('')\r\n    const [stateImgRepo, setStateImgRepo] = useState<ModelDef.TConfigImgRepo>(globalConfig.Gallery.ImgRepo[0])\r\n\r\n    const contextValues: IUserInputContext = {\r\n        appSearchKey: stateSearchKey,\r\n        appSetSearchKey: setStateSearchKey,\r\n        appImgRepo: stateImgRepo,\r\n        appSetImgRepo: setStateImgRepo\r\n    }\r\n\r\n    return (\r\n            <UserInputContext.Provider value={contextValues}>\r\n                {children}\r\n            </UserInputContext.Provider>)\r\n}\r\n\r\nexport default UserInputContextHOC","import React, { FC } from 'react'\r\nimport { SWRConfig } from 'swr'\r\n\r\nimport Helper from './Model/Helper'\r\nimport UserInputContextHOC from './Context/UserInputContext'\r\n\r\nconst App: FC = ({ children }) => {\r\n    return (\r\n        <UserInputContextHOC>\r\n            <SWRConfig value={{\r\n                fetcher: Helper.Fetcher, suspense: true,\r\n                revalidateOnFocus: false, //all options below is to use useSWR to fetch only one time\r\n                revalidateOnMount: false,\r\n                revalidateOnReconnect: false,\r\n                refreshWhenOffline: false,\r\n                refreshWhenHidden: false,\r\n                refreshInterval: 0\r\n            }}>\r\n                <div className=\"App\">\r\n                    {children}\r\n                </div>\r\n            </SWRConfig>\r\n        </UserInputContextHOC>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { NavLink as ReactLink, Route, withRouter } from 'react-router-dom'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { ChangeEvent, FC, ReactElement, useEffect, useRef, useState, createContext, Children } from 'react'\r\n\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper, { PokeHelper } from '../Model/Helper'\r\nimport useSearchKey from '../Hook/useSearchKey'\r\n\r\nexport interface IMyRouteMatchParams {\r\n    routeId: string\r\n}\r\n\r\nexport interface IGalleryContextHOC extends RouteComponentProps<IMyRouteMatchParams> {\r\n    //appGen: ModelDef.TGeneration,\r\n    //children: ReactElement\r\n}\r\n\r\ninterface IGalleryContext {\r\n    appDisplayGalleryItems: ModelDef.TNamedAPIResource[],\r\n    appIsShowSpecialHandler: any,\r\n    appRouteCtx?: RouteComponentProps<IMyRouteMatchParams>\r\n}\r\n\r\nexport const GalleryContext = createContext<IGalleryContext>({\r\n    appDisplayGalleryItems: [],\r\n    appIsShowSpecialHandler: null\r\n})\r\n\r\nconst shuffleArray = function (array: any[]) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\nconst scrollBtnCssClassHide = \"scroll-top scroll-top-hide\"\r\nconst scrollBtnCssClassShow = \"scroll-top scroll-top-show\"\r\n\r\nconst GalleryContextHOC: FC<IGalleryContextHOC> = ({ children, ...routeParams }): ReactElement => {\r\n    \r\n    const globalConfig = Helper.GetGlobalConfig() // get the content of the file \"public/GlobalConfig.cs\"\r\n    const pokeHelper = PokeHelper()\r\n    //console.log(routeParams.match.params.routeId)\r\n\r\n    const getGlobalConfigGenDataObj\r\n        = (criteriaChecker: (g: ModelDef.TConfigGenData) => boolean): ModelDef.TConfigGenData => {\r\n        return globalConfig.Gallery.GenData.find(g => criteriaChecker(g)) || globalConfig.Gallery.GenData[0]\r\n    }\r\n\r\n    const targetGlobalConfigGenDataObj: ModelDef.TConfigGenData\r\n        = getGlobalConfigGenDataObj(g => g.routeId === routeParams.match.params.routeId)\r\n    const sortedTargetGen: ModelDef.TGeneration = pokeHelper.GetSortedGen(targetGlobalConfigGenDataObj.obj)\r\n\r\n    const [stateSortedGalleryItems, setStateSortedGalleryItems] = useState<ModelDef.TNamedAPIResource[]>([]);\r\n\r\n    const [appSearchKey, appSetSearchKey] = useSearchKey()\r\n    const [stateIsShowSpecialOnly, setStateIsShowSpecialOnly] = useState<boolean>(false)\r\n    const scrollToThisEleRef = useRef(null) // for the scroll-to-top btn\r\n\r\n    const shuffleHandler = () => {\r\n        let newData = shuffleArray([...stateSortedGalleryItems])\r\n        setStateSortedGalleryItems(newData)\r\n    }\r\n\r\n    useEffect(() => { // re-load at appropriate time\r\n        setStateSortedGalleryItems(sortedTargetGen.pokemon_species)\r\n    }, [routeParams.match.params, sortedTargetGen.pokemon_species])\r\n\r\n    const [stateScrollBtnCssClass, setStateScrollBtnCssClass] = useState<string>(scrollBtnCssClassHide)\r\n\r\n    // the scroll-to-top btn is hidden originally; it appears after first scroll\r\n    const firstScrollHandler = () => setStateScrollBtnCssClass(scrollBtnCssClassShow)\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', firstScrollHandler, { once: true })\r\n        return () => {\r\n            document.removeEventListener('scroll', firstScrollHandler)\r\n        };\r\n    })\r\n\r\n    const isShowSpecialHandler = (pokeSpec: ModelDef.TPokemonSpecies) => {\r\n        let rtn = true\r\n        if (stateIsShowSpecialOnly && !pokeSpec.is_legendary && !pokeSpec.is_mythical) {\r\n            rtn = false\r\n        }\r\n        return rtn\r\n    }\r\n\r\n    // filter the display items by search key\r\n    const getDisplayGalleryItems = (): ModelDef.TNamedAPIResource[] => {\r\n        let rtn = [] as ModelDef.TNamedAPIResource[]\r\n        stateSortedGalleryItems.forEach((apiRes: ModelDef.TNamedAPIResource) => {\r\n            if (apiRes.name.toLowerCase().includes(appSearchKey.toLocaleLowerCase())) {\r\n                rtn = [...rtn, apiRes];\r\n            }\r\n        });\r\n\r\n        return rtn\r\n    }\r\n\r\n    const toBeDisplayedGalleryItems = getDisplayGalleryItems();\r\n\r\n    // handle the <select> of \"Pokemon Generation\" by url redirection\r\n    const selectTargetGenDataObjHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        const targetGenDataObj = getGlobalConfigGenDataObj(g => g.desc === e.target.value)\r\n        //console.log(routeParams)\r\n        routeParams.history.push(routeParams.match.path.replace(\":routeId?\", targetGenDataObj.routeId))\r\n    }\r\n\r\n    const contextValues: IGalleryContext = {\r\n        appDisplayGalleryItems: toBeDisplayedGalleryItems,\r\n        appIsShowSpecialHandler: isShowSpecialHandler,\r\n        appRouteCtx: routeParams\r\n\t}\r\n\r\n    return (\r\n        <>\r\n            <link rel=\"stylesheet\" type=\"text/css\" href={`${process.env.PUBLIC_URL}/pageCss/gallery-context.css`} />\r\n\r\n            <div ref={scrollToThisEleRef}>&nbsp;</div>\r\n\r\n            \r\n\r\n            <div>\r\n                <div>\r\n                <select onChange={selectTargetGenDataObjHandler} defaultValue={targetGlobalConfigGenDataObj.desc}>\r\n                    {globalConfig.Gallery.GenData.map(d =>\r\n                        <option key={d.desc} value={d.desc}>{d.desc}</option>\r\n                    )\r\n                    }\r\n                </select>\r\n\r\n                <h5 style={{ display: \"inline-block\" }} className=\"ms-2\">\r\n                    {pokeHelper.GetGenNameDesc(sortedTargetGen)}\r\n                </h5>\r\n\r\n                <span className=\"nav-menu\">\r\n                    <ReactLink activeClassName={\"currently-viewing\"} to={`/${targetGlobalConfigGenDataObj.routeId}`} exact={true}>List view</ReactLink>{' '}|{' '}\r\n                    <ReactLink activeClassName={\"currently-viewing\"} to={`/waterfall/${targetGlobalConfigGenDataObj.routeId}`}>Waterfall gallery</ReactLink>\r\n                </span>\r\n                </div>\r\n\r\n                <button onClick={shuffleHandler}>Shuffle</button>\r\n                &nbsp;\r\n                <input type=\"text\" value={appSearchKey} placeholder=\"Search by Eng name\"\r\n                    onChange={(e) => appSetSearchKey(e.target.value)} />\r\n                &nbsp; &nbsp;\r\n                {/* pending due to waterfall\r\n                <label style={{cursor:\"pointer\"}}>\r\n                    <input type=\"checkbox\" defaultChecked={stateIsShowSpecialOnly} onChange={(e) => { setStateIsShowSpecialOnly(e.target.checked) }} />\r\n                    <span> Only show legendary or mythical Pokémon</span>\r\n                </label>\r\n                */}\r\n            </div>\r\n            <br/>\r\n\r\n            <GalleryContext.Provider value={contextValues}>\r\n                {children}\r\n            </GalleryContext.Provider>\r\n\r\n            <button className={stateScrollBtnCssClass} onClick={() => {\r\n                //window.scrollTo({ top: Helper.GetGlobalConfig().DeclarHeight, behavior: 'smooth' })\r\n                let ele = scrollToThisEleRef.current as unknown as HTMLElement\r\n                ele.scrollIntoView();\r\n            }}\r\n                \r\n            >\r\n                Top\r\n            </button>\r\n        </>)\r\n};\r\n\r\nexport default withRouter(GalleryContextHOC)","import { FC, useContext, useState, useRef, useEffect, Suspense, lazy } from 'react'\r\n\r\nimport { UserInputContext } from \"../Context/UserInputContext\"\r\n\r\nexport default function useSearchKey() {\r\n\r\n    const {\r\n        appSearchKey,\r\n        appSetSearchKey\r\n    } = useContext(UserInputContext)\r\n\r\n    return [appSearchKey, appSetSearchKey]\r\n}","import { useTransition, config } from \"react-spring\"\r\n\r\nimport * as ModelDef from '../Model/Model'\r\n\r\nconst getSpringStyles = (enumViewPageName: ModelDef.EViewPage) => {\r\n\r\n    if (enumViewPageName === ModelDef.EViewPage.Default) {\r\n        return {\r\n            from: { opacity: 0 },\r\n            enter: { opacity: 1 },\r\n            leave: { opacity: 0 }\r\n        }\r\n    } else {\r\n        return {\r\n            from: { opacity: 0 },\r\n            enter: { opacity: 1 },\r\n            leave: { opacity: 0 }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default function useAnim(enumViewPageName: ModelDef.EViewPage) {\r\n\r\n    const componentRepresentation = enumViewPageName \r\n    const compRepMapKey = (compRep: typeof enumViewPageName) => { return enumViewPageName }\r\n\r\n    return useTransition( // animation will play if and only if the first argument of \"useTransition\" changes\r\n        componentRepresentation, {\r\n            keys: compRepMapKey,\r\n            ...getSpringStyles(enumViewPageName),\r\n            config: config.slow\r\n    })\r\n}","import styled from 'styled-components'\nimport * as ModelDef from '../Model/Model'\n\n// Type colors\nconst type: any = {\n  bug: 'rgb(81,204,90)',\n  dark: 'rgb(104,129,213)',\n  dragon: 'rgb(254,136,88)',\n  electric: 'rgb(232,212,1)',\n  fairy: 'rgb(253,119,154)',\n  fighting: 'rgb(239,105,106)',\n  fire: 'rgb(255,167,103)',\n  flying: 'rgb(100,166,240)',\n  ghost: 'rgb(177,110,180)',\n  grass: 'rgb(154,195,13)',\n  ground: 'rgb(200,168,65)',\n  ice: 'rgb(96,232,244)',\n  normal: 'rgb(174, 174, 174)',\n  poison: 'rgb(171,122,203)',\n  psychic: 'rgb(236,127,244)',\n  rock: 'rgb(251,199,38)',\n  steel: 'rgb(128,138,165)',\n  water: 'rgb(100,198,247)'\n}\n\ntype TStyledGalleryUICardProps = {\n    pokeColor: string\n}\n\nexport const StyledGalleryUICard = styled.div<TStyledGalleryUICardProps>`\n  position: relative;\n  \n  ${({ pokeColor }) => `\n    background-image: linear-gradient(60deg, rgb(45, 45, 45) 30%, ${pokeColor} 100%);\n  `}\n\n  .ul-poke-desc {\n    ${({ pokeColor }) => `border-left: 5px solid ${pokeColor};`}\n    list-style-type: none;\n    padding: 3px 10px;\n  }\n\n  .ul-poke-desc li:first-child {\n     padding-bottom: 10px;\n  }\n\n    .ul-poke-spec li {\n        padding-bottom: 5px;\n        white-space:nowrap;\n        color: #ffffff;\n    }\n\n    .h-weight-height-desc{\n        margin-left:15px;\n        margin-top:5px;\n    }\n\n`\n\ntype TStyledPokeTypeProps = {\n    pokemonType: string\n}\n\nexport const StyledPokeType = styled.span<TStyledPokeTypeProps>`\n  position: relative;\n  \n  ${({ pokemonType }) => `\n    background: ${type[pokemonType]};\n    background-size: 65%;\n    background-position: center;\n  `}\n\n  display: inline-block;\n  border-radius: 20px;\n  font-weight: bold;\n  padding: 6px;\n  color: #444444;\n  margin-right: 4px;\n  opacity: 1;\n  text-transform: capitalize;\n`","// Dependencies\r\nimport { useEffect, useContext, Suspense } from 'react'\r\nimport { FC } from 'react'\r\nimport useSWR from 'swr'\r\n\r\n//import { AppCache } from '../Model/Helper'\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper, { PokeHelper } from '../Model/Helper'\r\nimport { GalleryContext } from \"../Context/GalleryContext\"\r\nimport { StyledGalleryUICard, StyledPokeType } from './Styled'\r\n\r\ntype Props = {\r\n    pokeSpecApiRes: ModelDef.TNamedAPIResource\r\n}\r\n\r\nconst pokeHelper = PokeHelper()\r\nconst urlPoke = (pokeSpecApiRes: ModelDef.TNamedAPIResource) => `https://pokeapi.co/api/v2/pokemon/${pokeHelper.GetPokeIdFromPokeSpecApiRes(pokeSpecApiRes)}`\r\nconst genTFindicator = (tf: boolean) => (tf ? \"Yes\" : \"--\" )\r\n\r\nconst GalleryUICard: FC<Props> = ({ pokeSpecApiRes }) => {\r\n\r\n    const {\r\n        appIsShowSpecialHandler,\r\n    } = useContext(GalleryContext)\r\n\r\n    const { data: dataPoke, error: errorPoke } = useSWR(urlPoke(pokeSpecApiRes))\r\n    const { data: dataPokeSpec, error: errorPokeSpec }: { data?: any, error?: any } = useSWR(pokeSpecApiRes.url)\r\n\r\n    let poke: ModelDef.TPokemon\r\n    let pokeSpec: ModelDef.TPokemonSpecies\r\n\r\n    // recall the error we set on the fetcher\r\n    if (errorPoke || errorPokeSpec || dataPoke.error || dataPokeSpec.error) {\r\n        return <div />\r\n    } else {\r\n        poke = dataPoke as ModelDef.TPokemon\r\n        pokeSpec = dataPokeSpec as ModelDef.TPokemonSpecies\r\n    }\r\n\r\n    const flavorText1Obj: ModelDef.TFlavorText|undefined = pokeSpec.flavor_text_entries.find((ft: ModelDef.TFlavorText) => ft.language.name === \"en\")\r\n    const flavorText2Obj: ModelDef.TFlavorText | undefined = pokeSpec.flavor_text_entries.find((ft: ModelDef.TFlavorText) => ft.language.name === \"zh-Hant\") ??\r\n        pokeSpec.flavor_text_entries.find((ft: ModelDef.TFlavorText) => ft.language.name === \"ja\")\r\n\r\n    const flavorText1 = flavorText1Obj?.flavor_text.replace('\\u000c', ' ')\r\n    const flavorText2 = flavorText2Obj?.flavor_text.replace('\\u000c', ' ').replaceAll('\\n','')\r\n\r\n    const pokemonTypes = poke.types.map((pokemonType: any) => pokemonType.type.name)\r\n\r\n    return (appIsShowSpecialHandler(pokeSpec) &&\r\n        <StyledGalleryUICard pokeColor={pokeSpec.color.name} className=\"border-bottom\">\r\n            <h2>#{pokeSpec.id} {pokeHelper.GetNameDesc(pokeSpec)}</h2>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        {\r\n                            pokemonTypes.map((pokemonType: string) =>\r\n                                <StyledPokeType key={pokemonType} pokemonType={pokemonType}><span key={poke!.name + pokemonType}>{pokemonType}</span></StyledPokeType>)\r\n                        }\r\n\r\n                        <img alt={poke.name} src={\r\n                            //poke.sprites.front_default\r\n                            `sprites/pokemon/${poke.id}.png`\r\n                        } />\r\n                        \r\n                        <ul className=\"ul-poke-desc\">\r\n                            <li>{flavorText1}</li>\r\n                            <li>{flavorText2}</li>\r\n                        </ul>\r\n\r\n                    </div>\r\n                    <div className=\"col-sm my-auto\">\r\n                        <div className=\"row\">\r\n                            <h5 className=\"h-weight-height-desc\">Height: {poke.height * 10} cm\r\n                                &nbsp;\r\n                                &nbsp;\r\n                                Weight: {poke.weight / 10} kg</h5>\r\n                            <div className=\"col-sm\">\r\n                                <ul className=\"ul-poke-spec\">\r\n                                    <li title=\"The happiness when caught by a normal Pokéball; up to 255. The higher the number, the happier the Pokémon.\">\r\n                                        Base happiness: {pokeSpec.base_happiness}\r\n                                    </li>\r\n                                    <li title=\"The base capture rate; up to 255. The higher the number, the easier the catch.\">\r\n                                        Capture rate: {pokeSpec.capture_rate}\r\n                                    </li>\r\n                                    <li title=\"The chance of this Pokémon being female, in eighths; or -1 for genderless.\">\r\n                                        Gender rate: {pokeSpec.gender_rate}\r\n                                    </li>\r\n                                    <li title=\"The color of this Pokémon for Pokédex search.\">\r\n                                        Color: {pokeSpec.color.name}\r\n                                    </li>\r\n                                    <li title=\"The genus of this Pokémon species listed in multiple languages.\">\r\n                                        Genera: {pokeHelper.GetGenusDesc(pokeSpec)}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <ul className=\"ul-poke-spec\">\r\n                                    <li title=\"Whether or not this is a baby Pokémon.\">\r\n                                        Is baby? {genTFindicator(pokeSpec.is_baby)}\r\n                                    </li>\r\n                                    <li title=\"Whether or not this Pokémon has multiple forms and can switch between them.\">\r\n                                        Forms switchable? {genTFindicator(pokeSpec.forms_switchable)}\r\n                                    </li>\r\n                                    <li title=\"Whether or not this Pokémon has visual gender differences.\">\r\n                                        Has gender differences? {genTFindicator(pokeSpec.has_gender_differences)}\r\n                                    </li>\r\n                                    <li title=\"Whether or not this is a legendary Pokémon.\">\r\n                                        Is legendary? {genTFindicator(pokeSpec.is_legendary)}\r\n                                    </li>\r\n                                    <li title=\"Whether or not this is a mythical Pokémon.\">\r\n                                        Is mythical? {genTFindicator(pokeSpec.is_mythical)}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </StyledGalleryUICard>\r\n    )\r\n}\r\n\r\nexport default GalleryUICard\r\n","import { FC } from 'react'\nimport Skeleton from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\n\nimport * as ModelDef from '../Model/Model'\nimport Helper, { PokeHelper } from '../Model/Helper'\n\ntype Props = {\n    pokeSpecApiRes: ModelDef.TNamedAPIResource\n}\n\nconst GalleryUICardLoadSkeleton: FC<Props> = ({ pokeSpecApiRes }) => {\n\n    const pokeHelper = PokeHelper()\n\n    return (\n        <div>\n            <h2>#{pokeHelper.GetPokeIdFromPokeSpecApiRes(pokeSpecApiRes)} {pokeSpecApiRes.name}</h2>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm\">\n                        <Skeleton height={10} count={5} />\n                        </div>\n                        <div className=\"col-sm\">\n                        <Skeleton height={10} count={5} />\n                        </div>\n                        <div className=\"col-sm\">\n                        <Skeleton height={10} count={5} />\n                        </div>\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default GalleryUICardLoadSkeleton\n","import { FC, useContext, useState, useRef, useEffect, Suspense, lazy } from 'react'\r\nimport { animated } from \"react-spring\"\r\n//import { RouteComponentProps } from 'react-router'\r\n\r\nimport useAnim from '../Hook/useAnim'\r\nimport Helper from '../Model/Helper'\r\nimport * as ModelDef from '../Model/Model'\r\nimport { GalleryContext } from \"../Context/GalleryContext\"\r\nimport GalleryUICard from \"./GalleryUICard\"\r\nimport PokeCardLoadingSkeleton from \"./GalleryUICardLoadSkeleton\"\r\n\r\nconst GalleryUI: FC = () => {\r\n\r\n\tconst {\r\n\t\tappDisplayGalleryItems,\r\n\t\tappRouteCtx\r\n\t} = useContext(GalleryContext)\r\n\r\n\tconst [stateIsLoadMore, setStateIsLoadMore] = useState<boolean>(false)\r\n\r\n\t// just to avoid the following warning for the \"useEffect\" line below:\r\n\t// \"React Hook useEffect has a complex expression in the dependency array. \r\n\t// Extract it to a separate variable so it can be statically checked\"\r\n\tconst routeMatchParam = appRouteCtx!.match.params\r\n\r\n\tuseEffect(() => { // re-load at appropriate time\r\n\t\tsetStateIsLoadMore(false)\r\n\t}, [routeMatchParam])\r\n\r\n\t//const GallaryUICard = lazy(() => import(\"./GalleryUICard\"))\r\n\r\n\treturn (appDisplayGalleryItems == null ? <></> :\r\n\t\t<>\r\n\r\n\t\t\t<Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t{appDisplayGalleryItems.slice(0, 30).map((apiRes: ModelDef.TNamedAPIResource) =>\r\n\t\t\t\t<Suspense key={\"GalleryUIsuspense\" + apiRes.name} fallback={<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes}/>}>\r\n\t\t\t\t\t{/*<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes}/>*/}\r\n\t\t\t\t\t<GalleryUICard key={apiRes.name} pokeSpecApiRes={apiRes} />\r\n\t\t\t\t</Suspense>\r\n\t\t\t)}\r\n\t\t\t</Suspense>\r\n\r\n\t\t\t<Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t\t{appDisplayGalleryItems.slice(30, 60).map((apiRes: ModelDef.TNamedAPIResource) =>\r\n\t\t\t\t\t<Suspense key={\"GalleryUIsuspense\" + apiRes.name} fallback={<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes} />}>\r\n\t\t\t\t\t\t<GalleryUICard key={apiRes.name} pokeSpecApiRes={apiRes} />\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t)}\r\n\t\t\t</Suspense>\r\n\r\n\t\t\t{appDisplayGalleryItems.length > 60 && !stateIsLoadMore &&\r\n\t\t\t\t<>\r\n\t\t\t\t<button onClick={() => setStateIsLoadMore(true)} className=\"btn btn-primary mx-auto d-block mt-3\">\r\n\t\t\t\t\tLoad more\r\n\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t{stateIsLoadMore &&\r\n\t\t\t\t<>\r\n\t\t\t\t<Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t\t{appDisplayGalleryItems.slice(60, 90).map((apiRes: ModelDef.TNamedAPIResource) =>\r\n\t\t\t\t\t<Suspense key={\"GalleryUIsuspense\" + apiRes.name} fallback={<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes} />}>\r\n\t\t\t\t\t\t<GalleryUICard key={apiRes.name} pokeSpecApiRes={apiRes} />\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t)}\r\n\t\t\t</Suspense>\r\n\r\n\t\t\t<Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t\t{appDisplayGalleryItems.slice(90, 120).map((apiRes: ModelDef.TNamedAPIResource) =>\r\n\t\t\t\t\t<Suspense key={\"GalleryUIsuspense\" + apiRes.name} fallback={<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes} />}>\r\n\t\t\t\t\t\t<GalleryUICard key={apiRes.name} pokeSpecApiRes={apiRes} />\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t)}\r\n\t\t\t</Suspense>\r\n\r\n\t\t\t<Suspense fallback={<p>Loading...</p>}>\r\n\t\t\t\t{appDisplayGalleryItems.slice(120, 151).map((apiRes: ModelDef.TNamedAPIResource) =>\r\n\t\t\t\t\t<Suspense key={\"GalleryUIsuspense\" + apiRes.name} fallback={<PokeCardLoadingSkeleton pokeSpecApiRes={apiRes} />}>\r\n\t\t\t\t\t\t<GalleryUICard key={apiRes.name} pokeSpecApiRes={apiRes} />\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t)}\r\n\t\t\t</Suspense>\r\n\t\t\t\t\t\t</>}\r\n\t\t\t\t\r\n\t\t\t</>)\r\n}\r\n\r\nexport default GalleryUI;","// Dependencies\r\nimport { useEffect, useContext } from 'react'\r\nimport { FC } from 'react'\r\nimport useSWR from 'swr'\r\n\r\n//import { AppCache } from '../Model/Helper'\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper, { PokeHelper } from '../Model/Helper'\r\nimport { GalleryContext } from \"../Context/GalleryContext\"\r\n\r\ntype TProps = {\r\n    appIsTargetNow: boolean\r\n    pokeSpecApiRes: ModelDef.TNamedAPIResource\r\n    appDisplayPokeDetailHandler: any\r\n}\r\n\r\nconst pokeHelper = PokeHelper()\r\n\r\nconst WaterUIback: FC<TProps> = ({ pokeSpecApiRes, appIsTargetNow, appDisplayPokeDetailHandler }) => {\r\n\r\n    let rtn = null //always return null since this component renders nothing but do the useSWR job only\r\n\r\n    //console.log(appIsTargetNow)\r\n    /*\r\n    if (!appIsTargetNow) {\r\n        return null\r\n    }\r\n    */\r\n\r\n    const {\r\n        appIsShowSpecialHandler,\r\n    } = useContext(GalleryContext)\r\n\r\n    const { data: dataPokeSpec, error: errorPokeSpec }: { data?: any, error?: any } = useSWR(pokeSpecApiRes.url)\r\n    //console.log(pokeSpecApiRes.url)\r\n    //console.log(dataPokeSpec)\r\n    let pokeSpec: ModelDef.TPokemonSpecies\r\n\r\n    useEffect(() => { abc() })\r\n\r\n    if (errorPokeSpec || dataPokeSpec.error) {\r\n        return rtn //<div key={\"WaterUIback2\" + pokeSpecApiRes.name}>Still loading</div>\r\n    }\r\n\r\n    pokeSpec = dataPokeSpec as ModelDef.TPokemonSpecies\r\n\r\n    const abc = () => {\r\n        //console.log(123)\r\n        if (appIsTargetNow) {\r\n            appDisplayPokeDetailHandler(pokeSpec)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    //return <span>{rtnMsg}</span>\r\n\r\n    return rtn //<span key={\"WaterUIback3\" + pokeSpecApiRes.name}></span> //null // <span key={\"WaterUIback3\" + pokeSpecApiRes.name}></span>\r\n    \r\n}\r\n\r\nexport default WaterUIback\r\n","import './OptionRollUI.css'\r\nimport { useState, useEffect, useContext, ChangeEvent, MouseEvent } from 'react'\r\n\r\ninterface IOptionRollConfig {\r\n    //Size: number,\r\n    Desc: string,\r\n    OptionLabels: string[],\r\n    OptionValues: any[],\r\n    InitSelectedInd: number,\r\n    OptionChangeHandler(newValue: any): any,\r\n}\r\n\r\nconst OptionRollUI = (optionConfig: IOptionRollConfig) => {\r\n    \r\n    const [stateSelectedInd, setStateSelectedInd] = useState(optionConfig.InitSelectedInd)\r\n\r\n    // cannot drop the following manual update...\r\n    useEffect(() => {\r\n        let isMounted = true // for async operation like asyncStorage\r\n        if (isMounted) {\r\n            setStateSelectedInd(optionConfig.InitSelectedInd)\r\n        }\r\n\r\n        return () => { isMounted = false }\r\n\r\n    }, [optionConfig.InitSelectedInd])\r\n\r\n    const options: { label: string, value: any }[] = optionConfig.OptionLabels.map((l, ind) =>\r\n        ({ label: l, value: optionConfig.OptionValues[ind] }))\r\n\r\n    const selectChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        const newValue = e.target.value\r\n        const newInd = options.findIndex(obj => obj.value === newValue)\r\n\r\n        onOptionChanged(newValue, newInd)\r\n    }\r\n\r\n    const onOptionChanged = (newValue: any, newInd: number) => {\r\n        optionConfig.OptionChangeHandler(newValue)\r\n        setStateSelectedInd(newInd)\r\n    }\r\n\r\n    const prevHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n\r\n        e.preventDefault()\r\n\r\n        const newInd = (stateSelectedInd - 1 < 0) ?\r\n            stateSelectedInd - 1 + optionConfig.OptionValues.length : stateSelectedInd - 1\r\n        const newValue = optionConfig.OptionValues[newInd]\r\n\r\n        onOptionChanged(newValue, newInd)\r\n    }\r\n\r\n    const nextHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n\r\n        e.preventDefault()\r\n\r\n        const newInd = (stateSelectedInd + 1) % optionConfig.OptionValues.length\r\n        const newValue = optionConfig.OptionValues[newInd]\r\n\r\n        onOptionChanged(newValue, newInd)\r\n    }\r\n\r\n    return (\r\n        <span >\r\n            {optionConfig.Desc}\r\n            <span className=\"option-roll-holder\">\r\n                <button className=\"btn btn-link shadow-none option-roll-clicker\" onClick={prevHandler}>&#9664;</button>\r\n\r\n                <select className=\"option-roll-select\" onChange={selectChangeHandler} value={optionConfig.OptionValues[stateSelectedInd]}>\r\n                    {options.map((o, ind) =>\r\n                        <option value={o.value} key={o.label}>{o.label}</option>\r\n                )}\r\n            </select>\r\n\r\n                <button className=\"btn btn-link shadow-none option-roll-clicker\" onClick={nextHandler}>&#9654;</button>\r\n            </span>\r\n        </span>\r\n        )\r\n}\r\n\r\nexport default OptionRollUI","import useSWR from 'swr'\r\nimport { FC, ChangeEvent, useContext, useEffect, useState, Suspense } from 'react'\r\nimport { animated } from \"react-spring\"\r\n\r\nimport { ProGallery } from 'pro-gallery'\r\nimport 'pro-gallery/dist/statics/main.css'\r\nimport ReactImageGallery, { ReactImageGalleryItem } from 'react-image-gallery'\r\nimport \"react-image-gallery/styles/css/image-gallery.css\"\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper, { PokeHelper } from '../Model/Helper'\r\nimport { GalleryContext } from \"../Context/GalleryContext\"\r\nimport WaterUIback from './WaterUIback'\r\nimport useImgRepo from '../Hook/useImgRepo'\r\nimport useAnim from '../Hook/useAnim'\r\nimport OptionRollUI from '../UI/OptionRollUI'\r\n\r\n\r\nconst TARGET_POKE_DESC_LOADING = \"loading...\"\r\n\r\nconst WaterUI: FC = () => {\r\n\r\n    const {\r\n        appIsShowSpecialHandler,\r\n    } = useContext(GalleryContext)\r\n\r\n    const globalConfig = Helper.GetGlobalConfig()\r\n    const pokeHelper = PokeHelper()\r\n\r\n    const [stateIsShowReactImgGal, setStateIsShowReactImgGal] = useState<boolean>(false)\r\n    const [stateReactImgGalIndex, setStateReactImgGalIndex] = useState<number>(0)\r\n    const [stateToBeTargetPokeId, setStateToBeTargetPokeId] = useState<number>(-1)\r\n    const [stateTargetPoke, setStateTargetPoke] = useState<ModelDef.TPokemonSpecies | null>(null)\r\n\r\n    const [appImgRepo, appSetImgRepo] = useImgRepo()\r\n\r\n    const {\r\n        appDisplayGalleryItems,\r\n    } = useContext(GalleryContext)\r\n\r\n    const styleChangeHandler = (newOptValue: string) => {\r\n        const targetImgRepo = globalConfig.Gallery.ImgRepo.find(ir => ir.optValue === newOptValue)\r\n        appSetImgRepo(targetImgRepo!!)\r\n    }\r\n\r\n    const proGalItems = appDisplayGalleryItems.map((apiRes: ModelDef.TNamedAPIResource) => {\r\n\r\n        const pokeId = pokeHelper.GetPokeIdFromPokeSpecApiRes(apiRes)\r\n\r\n        return {\r\n            itemId: pokeId + \"\",\r\n            mediaUrl: `${appImgRepo.basePath}${pokeId}.${appImgRepo.ext}`, // without this the change style func does not work...\r\n            url: `${appImgRepo.basePath}${pokeId}.${appImgRepo.ext}`,\r\n            metadata: {\r\n                type: \"image\",\r\n                alt: ' '\r\n            }\r\n        }\r\n    })\r\n\r\n    const reactImgGalItems = proGalItems.map((proItem: any) => ({\r\n        pokeId: proItem.itemId,\r\n        original: proItem.url\r\n    }))\r\n\r\n    const proGalContainer = {\r\n        width: window.innerWidth - 60, // minus some margin\r\n        height: window.innerHeight\r\n    };\r\n\r\n    const proGalOptions = {\r\n        imageHoverAnimation: 'ZOOM_IN',\r\n        hoveringBehaviour: 'NEVER_SHOW',\r\n        //gallerySizeType: 'px',\r\n        //gallerySizePx: 200,\r\n        gallerySize: 30,\r\n        itemBorderWidth: 2,\r\n        //itemEnableShadow: true,\r\n        //imageMargin: 2,\r\n        //minItemSize: 30,\r\n    };\r\n\r\n    const proGalEventsListener = (eventName: string, eventData: any) => {\r\n\r\n        switch (eventName) {\r\n            case 'ITEM_ACTION_TRIGGERED':\r\n                if (eventData.type === 'image') {\r\n\r\n                    setStateReactImgGalIndex(eventData.idx)\r\n\r\n                    setStateTargetPoke(null)\r\n                    setStateToBeTargetPokeId(parseInt(eventData.id))\r\n                    setStateIsShowReactImgGal(true)\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    const displayPokeDetailHandler = (pokeSpec: ModelDef.TPokemonSpecies) => {\r\n        setStateTargetPoke(pokeSpec)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <link rel=\"stylesheet\" type=\"text/css\" href={`${process.env.PUBLIC_URL}/pageCss/water-ui.css`} />\r\n\r\n            <OptionRollUI\r\n                Desc={\"Style: \"}\r\n                OptionLabels={globalConfig.Gallery.ImgRepo.map(ir => ir.desc)}\r\n                OptionValues={globalConfig.Gallery.ImgRepo.map(ir => ir.optValue)}\r\n                InitSelectedInd={globalConfig.Gallery.ImgRepo.findIndex(ir => ir.optValue === appImgRepo.optValue)}\r\n                OptionChangeHandler={(newOptValue) => styleChangeHandler(newOptValue)} />\r\n            <br /><br />\r\n\r\n            {appDisplayGalleryItems.length !== 0 &&\r\n                <ProGallery items={proGalItems} container={proGalContainer}\r\n                    options={proGalOptions} eventsListener={proGalEventsListener} />\r\n            }\r\n\r\n            {stateIsShowReactImgGal &&\r\n                <div className=\"react-image-gallery-container-container\">\r\n                    <div className=\"react-image-gallery-container\">\r\n                    <ReactImageGallery items={reactImgGalItems}\r\n                        onErrorImageURL={'water-default.png'}\r\n                        showBullets={false}\r\n                        showIndex={true}\r\n                        showThumbnails={true}\r\n                        lazyLoad={true}\r\n                        showPlayButton={false}\r\n                        startIndex={stateReactImgGalIndex}\r\n                        slideDuration={0}\r\n                        showFullscreenButton={false}\r\n                        onClick={() => setStateIsShowReactImgGal(false)}\r\n                        onSlide={(currentIndex: number) => {\r\n                            setStateTargetPoke(null)\r\n                            setStateToBeTargetPokeId(parseInt(reactImgGalItems[currentIndex].pokeId))\r\n                        }}\r\n                        /></div></div>\r\n            }\r\n\r\n            <Suspense fallback={null}>\r\n            {appDisplayGalleryItems.map((apiRes: ModelDef.TNamedAPIResource) =>\r\n                    <WaterUIback key={\"WaterUIback1\" + apiRes.name} pokeSpecApiRes={apiRes}\r\n                        appIsTargetNow={pokeHelper.GetPokeIdFromPokeSpecApiRes(apiRes) === (stateToBeTargetPokeId)}\r\n                        appDisplayPokeDetailHandler={displayPokeDetailHandler} />\r\n                )}\r\n            </Suspense>\r\n\r\n            {\r\n                stateIsShowReactImgGal &&\r\n                <div className=\"target-poke-desc\">\r\n                    <h1 className=\"target-poke-desc-top-left\">{stateTargetPoke != null ? \"#\" + stateTargetPoke.id : TARGET_POKE_DESC_LOADING}</h1>\r\n                    <h1 className=\"target-poke-desc-bottom-center\">{stateTargetPoke != null ? pokeHelper.GetNameDesc(stateTargetPoke) : TARGET_POKE_DESC_LOADING}</h1>\r\n                </div>\r\n            }\r\n        </>)\r\n}\r\n\r\nexport default WaterUI","import { FC, useContext, useState, useRef, useEffect, Suspense, lazy } from 'react'\r\n\r\nimport { UserInputContext } from \"../Context/UserInputContext\"\r\n\r\nexport default function useImgRepo() {\r\n\r\n    const {\r\n        appImgRepo,\r\n        appSetImgRepo\r\n    } = useContext(UserInputContext)\r\n\r\n    return [appImgRepo, appSetImgRepo]\r\n}","import { FC, useContext, useEffect, useState } from 'react'\r\nimport { SWRConfig } from 'swr'\r\nimport { animated } from \"react-spring\"\r\n\r\nimport * as ModelDef from '../Model/Model'\r\nimport Helper from '../Model/Helper'\r\nimport GalleryContextHOC, { IGalleryContextHOC } from \"../Context/GalleryContext\"\r\nimport useAnim from '../Hook/useAnim'\r\nimport GalleryUI from '../UI/GalleryUI'\r\nimport WaterUI from '../UI/WaterUI'\r\n\r\nconst DisplayContainer = (enumViewPage: ModelDef.EViewPage) => {\r\n\r\n    const stateAnim = useAnim(enumViewPage)\r\n\r\n    const getContent = (eViewPage: ModelDef.EViewPage) => {\r\n        switch (eViewPage) {\r\n            case ModelDef.EViewPage.Water:\r\n                return <WaterUI />\r\n            default:\r\n                return <GalleryUI />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GalleryContextHOC>\r\n            {stateAnim((styles, custItem) => (\r\n                <animated.div style={{\r\n                    ...styles,\r\n                }}>\r\n                    {getContent(custItem)}\r\n\t\t\t\t</animated.div>\r\n            ))\r\n        }\r\n        </GalleryContextHOC>\r\n    )\r\n};\r\n\r\nexport default DisplayContainer","import { HashRouter as ReactHashRouter, Route as ReactRoute, Switch as ReactSwitch, withRouter } from 'react-router-dom'\nimport { RouteComponentProps } from 'react-router';\nimport Helper from './Model/Helper'\nimport * as ModelDef from './Model/Model'\nimport { IMyRouteMatchParams } from './Context/GalleryContext'\n\n// Components\nimport App from './App'\nimport DisplayContainer from './Container/DisplayContainer'\n\nconst AppRoutes = () => {\n\n    //const globalConfig = Helper.GetGlobalConfig()\n\n    return (\n        <App>\n            <ReactHashRouter>\n                <ReactSwitch>\n                    <ReactRoute path=\"/waterfall/:routeId?\" component={(routeProps: RouteComponentProps<IMyRouteMatchParams>) => DisplayContainer(ModelDef.EViewPage.Water)} exact />\n                    <ReactRoute path=\"/:routeId?\" component={(routeProps: RouteComponentProps<IMyRouteMatchParams>) => DisplayContainer(ModelDef.EViewPage.Default)} exact />\n                </ReactSwitch>\n            </ReactHashRouter>\n        </App>\n    )\n}\n\nexport default AppRoutes","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as ReactBrowserRouter } from 'react-router-dom'\n\nimport Declar from './Declar'\nimport AppRoutes from './AppRoutes'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Declar/>\n        <ReactBrowserRouter>\n            <AppRoutes />\n        </ReactBrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}